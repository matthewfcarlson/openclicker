/**
 AUTOGENERATED ON 2024-06-04 23:28:49.803161
 DO NOT MODIFY THIS FILE MANUALLY
 IT WILL BE OVERWRITTEN ON THE NEXT BUILD
 Use the generate.py script in the protocol folder to regenerate this file
**/

import {z} from "zod";

export enum PresenterMessageId {
    RemoteButtonPressed = 20,
    BridgeButtonPressed = 21,
    RemoteHeartBeat = 22,
    RemoteRequestState = 23,
    PresenterSetState = 24,
};
const PresenterMessageIdZ = z.nativeEnum(PresenterMessageId);

export enum LittleStateNames {
    DarkState = 'dark',
    MultipleChoiceState = 'mc',
    EmojiState = 'emoji',
};
const LittleStateNamesZ = z.nativeEnum(LittleStateNames);

const PresenterMessageBaseZ = z.object({id: PresenterMessageIdZ});
export const ProtocolRemoteButtonPressedZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.RemoteButtonPressed),
    button_id: z.number().int().nonnegative().lt(4), // 8bit unsigned integer between 0 and 4 
});
export type ProtocolRemoteButtonPressed = z.infer<typeof ProtocolRemoteButtonPressedZ>;

export const ProtocolBridgeButtonPressedZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.BridgeButtonPressed),
    button_id: z.number().int().nonnegative().lt(4), // 8bit unsigned integer between 0 and 4 
});
export type ProtocolBridgeButtonPressed = z.infer<typeof ProtocolBridgeButtonPressedZ>;

export const ProtocolRemoteHeartBeatZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.RemoteHeartBeat),
    battery_level: z.number().int().nonnegative().lt(100), // 8bit unsigned integer between 0 and 100 
});
export type ProtocolRemoteHeartBeat = z.infer<typeof ProtocolRemoteHeartBeatZ>;

export const ProtocolRemoteRequestStateZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.RemoteRequestState),
    state_hash1: z.number().int().nonnegative().lte(0xFFFFFFFF), // 32bit unsigned integer 
    state_hash2: z.number().int().nonnegative().lte(0xFFFFFFFF), // 32bit unsigned integer 
    state_hash3: z.number().int().nonnegative().lte(0xFFFFFFFF), // 32bit unsigned integer 
    state_hash4: z.number().int().nonnegative().lte(0xFFFFFFFF), // 32bit unsigned integer 
});
export type ProtocolRemoteRequestState = z.infer<typeof ProtocolRemoteRequestStateZ>;

export const ProtocolPresenterSetStateZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.PresenterSetState),
    state_name: LittleStateNamesZ, // 32 character string that is a little state name 
});
export type ProtocolPresenterSetState = z.infer<typeof ProtocolPresenterSetStateZ>;

export function parsePresenterMessage(data: object, warn=false) {
    try {
        return ProtocolRemoteButtonPressedZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    try {
        return ProtocolBridgeButtonPressedZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    try {
        return ProtocolRemoteHeartBeatZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    try {
        return ProtocolRemoteRequestStateZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    try {
        return ProtocolPresenterSetStateZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    return null;
}
export type PresenterMessage = ProtocolRemoteButtonPressed | ProtocolBridgeButtonPressed | ProtocolRemoteHeartBeat | ProtocolRemoteRequestState | ProtocolPresenterSetState;