/**
 AUTOGENERATED ON 2024-06-15 13:03:38.300305
 DO NOT MODIFY THIS FILE MANUALLY
 IT WILL BE OVERWRITTEN ON THE NEXT BUILD
 Use the generate.py script in the protocol folder to regenerate this file
**/

import {z} from 'zod';

export const MIN_PRESENTER_MESSAGE_ID = 20;
export enum PresenterMessageId {
    RemoteButtonPressed = 20,
    RemoteRequestEmojis = 21,
    PresenterOfferEmojiOptions = 22,
    RemotePickEmojis = 23,
    PresenterAssignEmojis = 24,
    BridgeButtonPressed = 25,
    RemoteHeartBeat = 26,
    RemoteRequestState = 27,
    PresenterSetState = 28,
    PresenterRemotePacket = 29,
}
const PresenterMessageIdZ = z.nativeEnum(PresenterMessageId);

export enum LittleStateNames {
    DarkState = 'dark',
    MultipleChoiceState = 'mc',
}
const LittleStateNamesZ = z.nativeEnum(LittleStateNames);

const PresenterMessageBaseZ = z.object({id: PresenterMessageIdZ});
export const ProtocolRemoteButtonPressedZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.RemoteButtonPressed), // RemoteButtonPressed 
    button_id: z.number().int().nonnegative().lt(4), // 8bit unsigned integer between 0 and 4 
});
export type ProtocolRemoteButtonPressed = z.infer<typeof ProtocolRemoteButtonPressedZ>;

export const ProtocolRemoteRequestEmojisZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.RemoteRequestEmojis), // RemoteRequestEmojis 
});
export type ProtocolRemoteRequestEmojis = z.infer<typeof ProtocolRemoteRequestEmojisZ>;

export const ProtocolPresenterOfferEmojiOptionsZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.PresenterOfferEmojiOptions), // PresenterOfferEmojiOptions 
    emoji_choice_1: z.number().int().nonnegative().lte(0xFFFFFFFF), // 32bit unsigned integer 
    emoji_choice_2: z.number().int().nonnegative().lte(0xFFFFFFFF), // 32bit unsigned integer 
    emoji_choice_3: z.number().int().nonnegative().lte(0xFFFFFFFF), // 32bit unsigned integer 
    minimum_emojis: z.number().int().nonnegative().lte(255), // 8bit unsigned integer 
});
export type ProtocolPresenterOfferEmojiOptions = z.infer<typeof ProtocolPresenterOfferEmojiOptionsZ>;

export const ProtocolRemotePickEmojisZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.RemotePickEmojis), // RemotePickEmojis 
    emoji_choice_1: z.number().int().gte(0).lte(1), // boolean 
    emoji_choice_2: z.number().int().gte(0).lte(1), // boolean 
    emoji_choice_3: z.number().int().gte(0).lte(1), // boolean 
});
export type ProtocolRemotePickEmojis = z.infer<typeof ProtocolRemotePickEmojisZ>;

export const ProtocolPresenterAssignEmojisZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.PresenterAssignEmojis), // PresenterAssignEmojis 
    emoji_choice_1: z.number().int().nonnegative().lte(0xFFFFFFFF), // 32bit unsigned integer 
    emoji_choice_2: z.number().int().nonnegative().lte(0xFFFFFFFF), // 32bit unsigned integer 
    emoji_choice_3: z.number().int().nonnegative().lte(0xFFFFFFFF), // 32bit unsigned integer 
});
export type ProtocolPresenterAssignEmojis = z.infer<typeof ProtocolPresenterAssignEmojisZ>;

export const ProtocolBridgeButtonPressedZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.BridgeButtonPressed), // BridgeButtonPressed 
    button_id: z.number().int().nonnegative().lt(4), // 8bit unsigned integer between 0 and 4 
});
export type ProtocolBridgeButtonPressed = z.infer<typeof ProtocolBridgeButtonPressedZ>;

export const ProtocolRemoteHeartBeatZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.RemoteHeartBeat), // RemoteHeartBeat 
    battery_level: z.number().int().nonnegative().lt(100), // 8bit unsigned integer between 0 and 100 
    state_name: LittleStateNamesZ, // 20 character string that is a little state name 
});
export type ProtocolRemoteHeartBeat = z.infer<typeof ProtocolRemoteHeartBeatZ>;

export const ProtocolRemoteRequestStateZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.RemoteRequestState), // RemoteRequestState 
    state_hash1: z.number().int().nonnegative().lte(0xFFFFFFFF), // 32bit unsigned integer 
    state_hash2: z.number().int().nonnegative().lte(0xFFFFFFFF), // 32bit unsigned integer 
    state_hash3: z.number().int().nonnegative().lte(0xFFFFFFFF), // 32bit unsigned integer 
    state_hash4: z.number().int().nonnegative().lte(0xFFFFFFFF), // 32bit unsigned integer 
});
export type ProtocolRemoteRequestState = z.infer<typeof ProtocolRemoteRequestStateZ>;

export const ProtocolPresenterSetStateDarkStateZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.PresenterSetState), // PresenterSetState 
    state_name: z.literal(LittleStateNames.DarkState), // "dark" 
});
export type ProtocolPresenterSetStateDarkState = z.infer<typeof ProtocolPresenterSetStateDarkStateZ>;

export const ProtocolPresenterSetStateMultipleChoiceStateZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.PresenterSetState), // PresenterSetState 
    state_name: z.literal(LittleStateNames.MultipleChoiceState), // "mc" 
    num_choices: z.number().int().nonnegative().lte(255), // 8bit unsigned integer 
    question_text: z.string().max(63), // 64 character (including null terminator) string 
});
export type ProtocolPresenterSetStateMultipleChoiceState = z.infer<typeof ProtocolPresenterSetStateMultipleChoiceStateZ>;

export const ProtocolPresenterSetStateZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.PresenterSetState), // PresenterSetState 
    state_name: LittleStateNamesZ, // 20 character string that is a little state name 
});
export type ProtocolPresenterSetState = z.infer<typeof ProtocolPresenterSetStateZ>;

export const ProtocolPresenterRemotePacketZ = PresenterMessageBaseZ.extend({
    id: z.literal(PresenterMessageId.PresenterRemotePacket), // PresenterRemotePacket 
    from_mac: z.string().length(17), // A 6 byte mac address that is encoded in and out of a string for ease 
});
export type ProtocolPresenterRemotePacket = z.infer<typeof ProtocolPresenterRemotePacketZ>;

export type PresenterMessage = ProtocolBridgeButtonPressed | ProtocolPresenterAssignEmojis | ProtocolPresenterOfferEmojiOptions | ProtocolPresenterRemotePacket | ProtocolPresenterSetState | ProtocolPresenterSetStateDarkState | ProtocolPresenterSetStateMultipleChoiceState | ProtocolRemoteButtonPressed | ProtocolRemoteHeartBeat | ProtocolRemotePickEmojis | ProtocolRemoteRequestEmojis | ProtocolRemoteRequestState;

export function parsePresenterMessage(data: object, warn=false) {
    try {
        return ProtocolRemoteButtonPressedZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    try {
        return ProtocolRemoteRequestEmojisZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    try {
        return ProtocolPresenterOfferEmojiOptionsZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    try {
        return ProtocolRemotePickEmojisZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    try {
        return ProtocolPresenterAssignEmojisZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    try {
        return ProtocolBridgeButtonPressedZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    try {
        return ProtocolRemoteHeartBeatZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    try {
        return ProtocolRemoteRequestStateZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    try {
        return ProtocolPresenterSetStateDarkStateZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    try {
        return ProtocolPresenterSetStateMultipleChoiceStateZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    try {
        return ProtocolPresenterSetStateZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

    try {
        return ProtocolPresenterRemotePacketZ.parse(data);
    } catch(e) { if (warn) console.warn(e)}

}
export const MessageCreators = {
  RemoteRequestEmojis(
   wasm: any,
   to_mac: string
  ) {
    let func_name = 'create_RemoteRequestEmojis';
    return wasm.ccall(func_name, 'string', ["string"], [to_mac]);
  },
  PresenterOfferEmojiOptions(
   wasm: any,
   to_mac: string,
   emoji_choice_1: ProtocolPresenterOfferEmojiOptions['emoji_choice_1'],
   emoji_choice_2: ProtocolPresenterOfferEmojiOptions['emoji_choice_2'],
   emoji_choice_3: ProtocolPresenterOfferEmojiOptions['emoji_choice_3'],
   minimum_emojis: ProtocolPresenterOfferEmojiOptions['minimum_emojis']
  ) {
    let func_name = 'create_PresenterOfferEmojiOptions';
    return wasm.ccall(func_name, 'string', ["string",'number','number','number','number'], [to_mac,emoji_choice_1,emoji_choice_2,emoji_choice_3,minimum_emojis]);
  },
  RemotePickEmojis(
   wasm: any,
   to_mac: string,
   emoji_choice_1: ProtocolRemotePickEmojis['emoji_choice_1'],
   emoji_choice_2: ProtocolRemotePickEmojis['emoji_choice_2'],
   emoji_choice_3: ProtocolRemotePickEmojis['emoji_choice_3']
  ) {
    let func_name = 'create_RemotePickEmojis';
    return wasm.ccall(func_name, 'string', ["string",'number','number','number'], [to_mac,emoji_choice_1,emoji_choice_2,emoji_choice_3]);
  },
  PresenterAssignEmojis(
   wasm: any,
   to_mac: string,
   emoji_choice_1: ProtocolPresenterAssignEmojis['emoji_choice_1'],
   emoji_choice_2: ProtocolPresenterAssignEmojis['emoji_choice_2'],
   emoji_choice_3: ProtocolPresenterAssignEmojis['emoji_choice_3']
  ) {
    let func_name = 'create_PresenterAssignEmojis';
    return wasm.ccall(func_name, 'string', ["string",'number','number','number'], [to_mac,emoji_choice_1,emoji_choice_2,emoji_choice_3]);
  },
  PresenterSetStateDarkState(
   wasm: any,
   to_mac: string
  ) {
    let func_name = 'create_PresenterSetStateDarkState';
    return wasm.ccall(func_name, 'string', ["string"], [to_mac]);
  },
  PresenterSetStateMultipleChoiceState(
   wasm: any,
   to_mac: string,
   num_choices: ProtocolPresenterSetStateMultipleChoiceState['num_choices'],
   question_text: ProtocolPresenterSetStateMultipleChoiceState['question_text']
  ) {
    let func_name = 'create_PresenterSetStateMultipleChoiceState';
    return wasm.ccall(func_name, 'string', ["string",'number','string'], [to_mac,num_choices,question_text]);
  },
  PresenterSetState(
   wasm: any,
   to_mac: string,
   state_name: ProtocolPresenterSetState['state_name']
  ) {
    let func_name = 'create_PresenterSetState';
    return wasm.ccall(func_name, 'string', ["string",'string'], [to_mac,state_name]);
  },
};
