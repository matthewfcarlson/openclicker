name: build-and-test-and-release
on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]
jobs:
  firmware:
    runs-on: ubuntu-latest
    defaults:
        run:
          working-directory: ./firmware
    steps:
        - uses: actions/checkout@v4
        - uses: actions/cache@v4
          with:
            path: |
              ~/.cache/pip
              ~/.platformio/.cache
            key: ${{ runner.os }}-pio
        - uses: actions/setup-python@v4
          with:
            python-version: '3.11'
        - name: Install PlatformIO Core
          run: pip install --upgrade platformio
        - name: Install GCC
          run:   |
            sudo apt update
            sudo apt install gcc-10 g++-10
          shell: bash
        # It is important to first install the libraries before compiling, since otherwise compilation might fail to find the just-installed libraries
        - name: Install platformIO libraries
          run: pio lib install
        - name: Test PlatformIO Project
          run: pio test
        - name: Build PlatformIO Project
          run: pio run -e bridge -e remote
        - name: Upload bridge artifact
          uses: actions/upload-artifact@v4
          with:
            name: firmware-bridge
            path: |
              ./firmware/.pio/build/bridge/*.bin
              ./firmware/.pio/build/bridge/*.elf
              ./firmware/.pio/build/bridge/*.map
        - name: Upload remote artifact
          uses: actions/upload-artifact@v4
          with:
            name: firmware-remote
            path: |
              ./firmware/.pio/build/remote/*.bin
              ./firmware/.pio/build/remote/*.elf
              ./firmware/.pio/build/remote/*.map
  presenter:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./presenter
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/.eslintcache
          key: ${{ runner.os }}-electron
      - uses: oven-sh/setup-bun@v1
      - name: Install Node Modules
        run: bun install
      - name: Bun Build macOS
        run: bun run make -a arm64 -a x64 -p darwin
      - name: Upload linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: presenter-macos
          path: ./presenter/out/prod/make/zip/darwin/*/*.zip
      - name: Bun Build linux
        run: bun run make -a arm64 -a x64 -p linux
      - name: Upload linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: presenter-linux
          path: ./presenter/out/prod/make/zip/linux/*/*.zip
  presenter-windows:
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./presenter
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/.eslintcache
          key: ${{ runner.os }}-electron
      - uses: oven-sh/setup-bun@v1
      - name: Install Node Modules
        run: bun install
      - name: Bun Build windows
        run: bun run make -a x64 -a arm64 -p win32
      - name: Upload windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: presenter-windpws
          path: ./presenter/out/prod/make/zip/win32/*/*.zip