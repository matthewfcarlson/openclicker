/**
 AUTOGENERATED ON 2024-06-08 11:47:35.417152
 DO NOT MODIFY THIS FILE MANUALLY
 IT WILL BE OVERWRITTEN ON THE NEXT BUILD
 Use the generate.py script in the protocol folder to regenerate this file
**/

#include <protocol/presenter_protocol.h>
#include <string.h>
#include <emscripten.h>
#include <bridge/bridge.hpp>

const uint32_t msg_text_size = 255;
BridgeTransport* transport = new BridgeTransport();
const uint8_t bridge_mac[6] = {0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF};

char* presenter_message_to_json(const uint8_t* message, const uint32_t message_size, char* from_mac, char* to_mac) {
    if ((message[0] == RemoteButtonPressed)) {
        PresenterProtocolRemoteButtonPressed_t* msg = (PresenterProtocolRemoteButtonPressed_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":20,\"button_id\":%u}}",from_mac,to_mac,msg->button_id) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":20,\"button_id\":%u}}",from_mac,to_mac,msg->button_id);
        return json;
    }

    if ((message[0] == BridgeButtonPressed)) {
        PresenterProtocolBridgeButtonPressed_t* msg = (PresenterProtocolBridgeButtonPressed_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":21,\"button_id\":%u}}",from_mac,to_mac,msg->button_id) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":21,\"button_id\":%u}}",from_mac,to_mac,msg->button_id);
        return json;
    }

    if ((message[0] == RemoteHeartBeat)) {
        PresenterProtocolRemoteHeartBeat_t* msg = (PresenterProtocolRemoteHeartBeat_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":22,\"battery_level\":%u}}",from_mac,to_mac,msg->battery_level) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":22,\"battery_level\":%u}}",from_mac,to_mac,msg->battery_level);
        return json;
    }

    if ((message[0] == RemoteRequestState)) {
        PresenterProtocolRemoteRequestState_t* msg = (PresenterProtocolRemoteRequestState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":23,\"state_hash1\":%u,\"state_hash2\":%u,\"state_hash3\":%u,\"state_hash4\":%u}}",from_mac,to_mac,msg->state_hash1,msg->state_hash2,msg->state_hash3,msg->state_hash4) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":23,\"state_hash1\":%u,\"state_hash2\":%u,\"state_hash3\":%u,\"state_hash4\":%u}}",from_mac,to_mac,msg->state_hash1,msg->state_hash2,msg->state_hash3,msg->state_hash4);
        return json;
    }

    if ((message[0] == PresenterSetState) && (strncmp(((PresenterProtocolPresenterSetStateDarkState_t*)message)->state_name,"dark", 4) == 0)) {
        PresenterProtocolPresenterSetStateDarkState_t* msg = (PresenterProtocolPresenterSetStateDarkState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":24,\"state_name\":\"dark\"}}",from_mac,to_mac) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":24,\"state_name\":\"dark\"}}",from_mac,to_mac);
        return json;
    }

    if ((message[0] == PresenterSetState) && (strncmp(((PresenterProtocolPresenterSetStateMultipleChoiceState_t*)message)->state_name,"mc", 2) == 0)) {
        PresenterProtocolPresenterSetStateMultipleChoiceState_t* msg = (PresenterProtocolPresenterSetStateMultipleChoiceState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":24,\"state_name\":\"mc\",\"num_choices\":%u,\"question_text\":%s}}",from_mac,to_mac,msg->num_choices,msg->question_text) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":24,\"state_name\":\"mc\",\"num_choices\":%u,\"question_text\":%s}}",from_mac,to_mac,msg->num_choices,msg->question_text);
        return json;
    }

    if ((message[0] == PresenterSetState) && (strncmp(((PresenterProtocolPresenterSetStateEmojiState_t*)message)->state_name,"emoji", 5) == 0)) {
        PresenterProtocolPresenterSetStateEmojiState_t* msg = (PresenterProtocolPresenterSetStateEmojiState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":24,\"state_name\":\"emoji\",\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u,\"emoji_choice_4\":%u}}",from_mac,to_mac,msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3,msg->emoji_choice_4) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":24,\"state_name\":\"emoji\",\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u,\"emoji_choice_4\":%u}}",from_mac,to_mac,msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3,msg->emoji_choice_4);
        return json;
    }

    if ((message[0] == PresenterSetState)) {
        PresenterProtocolPresenterSetState_t* msg = (PresenterProtocolPresenterSetState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":24,\"state_name\":%s}}",from_mac,to_mac,msg->state_name) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":24,\"state_name\":%s}}",from_mac,to_mac,msg->state_name);
        return json;
    }

    if ((message[0] == PresenterRemotePacket)) {
        PresenterProtocolPresenterRemotePacket_t* msg = (PresenterProtocolPresenterRemotePacket_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":25,\"from_mac\":%s}}",from_mac,to_mac,msg->from_mac) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":25,\"from_mac\":%s}}",from_mac,to_mac,msg->from_mac);
        return json;
    }

   return NULL;
}

char* presenter_data_to_json(const uint8_t* message, const uint32_t message_size) {
    if ((message[0] == RemoteButtonPressed)) {
        PresenterProtocolRemoteButtonPressed_t* msg = (PresenterProtocolRemoteButtonPressed_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":20,\"button_id\":%u}",msg->button_id) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":20,\"button_id\":%u}",msg->button_id);
        return json;
    }

    if ((message[0] == BridgeButtonPressed)) {
        PresenterProtocolBridgeButtonPressed_t* msg = (PresenterProtocolBridgeButtonPressed_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":21,\"button_id\":%u}",msg->button_id) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":21,\"button_id\":%u}",msg->button_id);
        return json;
    }

    if ((message[0] == RemoteHeartBeat)) {
        PresenterProtocolRemoteHeartBeat_t* msg = (PresenterProtocolRemoteHeartBeat_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":22,\"battery_level\":%u}",msg->battery_level) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":22,\"battery_level\":%u}",msg->battery_level);
        return json;
    }

    if ((message[0] == RemoteRequestState)) {
        PresenterProtocolRemoteRequestState_t* msg = (PresenterProtocolRemoteRequestState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":23,\"state_hash1\":%u,\"state_hash2\":%u,\"state_hash3\":%u,\"state_hash4\":%u}",msg->state_hash1,msg->state_hash2,msg->state_hash3,msg->state_hash4) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":23,\"state_hash1\":%u,\"state_hash2\":%u,\"state_hash3\":%u,\"state_hash4\":%u}",msg->state_hash1,msg->state_hash2,msg->state_hash3,msg->state_hash4);
        return json;
    }

    if ((message[0] == PresenterSetState) && (strncmp(((PresenterProtocolPresenterSetStateDarkState_t*)message)->state_name,"dark", 4) == 0)) {
        PresenterProtocolPresenterSetStateDarkState_t* msg = (PresenterProtocolPresenterSetStateDarkState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":24,\"state_name\":\"dark\"}") + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":24,\"state_name\":\"dark\"}");
        return json;
    }

    if ((message[0] == PresenterSetState) && (strncmp(((PresenterProtocolPresenterSetStateMultipleChoiceState_t*)message)->state_name,"mc", 2) == 0)) {
        PresenterProtocolPresenterSetStateMultipleChoiceState_t* msg = (PresenterProtocolPresenterSetStateMultipleChoiceState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":24,\"state_name\":\"mc\",\"num_choices\":%u,\"question_text\":%s}",msg->num_choices,msg->question_text) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":24,\"state_name\":\"mc\",\"num_choices\":%u,\"question_text\":%s}",msg->num_choices,msg->question_text);
        return json;
    }

    if ((message[0] == PresenterSetState) && (strncmp(((PresenterProtocolPresenterSetStateEmojiState_t*)message)->state_name,"emoji", 5) == 0)) {
        PresenterProtocolPresenterSetStateEmojiState_t* msg = (PresenterProtocolPresenterSetStateEmojiState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":24,\"state_name\":\"emoji\",\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u,\"emoji_choice_4\":%u}",msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3,msg->emoji_choice_4) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":24,\"state_name\":\"emoji\",\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u,\"emoji_choice_4\":%u}",msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3,msg->emoji_choice_4);
        return json;
    }

    if ((message[0] == PresenterSetState)) {
        PresenterProtocolPresenterSetState_t* msg = (PresenterProtocolPresenterSetState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":24,\"state_name\":%s}",msg->state_name) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":24,\"state_name\":%s}",msg->state_name);
        return json;
    }

    if ((message[0] == PresenterRemotePacket)) {
        PresenterProtocolPresenterRemotePacket_t* msg = (PresenterProtocolPresenterRemotePacket_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":25,\"from_mac\":%s}",msg->from_mac) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":25,\"from_mac\":%s}",msg->from_mac);
        return json;
    }

   return NULL;
}

extern "C" char* create_RemoteButtonPressed(
    char* mac_addr_str,
    uint8_t button_id
) {
    PRESENTER_REMOTEBUTTONPRESSED(msg, button_id);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_BridgeButtonPressed(
    char* mac_addr_str,
    uint8_t button_id
) {
    PRESENTER_BRIDGEBUTTONPRESSED(msg, button_id);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_RemoteHeartBeat(
    char* mac_addr_str,
    uint8_t battery_level
) {
    PRESENTER_REMOTEHEARTBEAT(msg, battery_level);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_RemoteRequestState(
    char* mac_addr_str,
    uint32_t state_hash1,
    uint32_t state_hash2,
    uint32_t state_hash3,
    uint32_t state_hash4
) {
    PRESENTER_REMOTEREQUESTSTATE(msg, state_hash1, state_hash2, state_hash3, state_hash4);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_PresenterSetStateDarkState(
    char* mac_addr_str
) {
    PRESENTER_PRESENTERSETSTATEDARKSTATE(msg);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_PresenterSetStateMultipleChoiceState(
    char* mac_addr_str,
    uint8_t num_choices,
    char* question_text
) {
    PRESENTER_PRESENTERSETSTATEMULTIPLECHOICESTATE(msg, num_choices, question_text);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_PresenterSetStateEmojiState(
    char* mac_addr_str,
    uint16_t emoji_choice_1,
    uint16_t emoji_choice_2,
    uint16_t emoji_choice_3,
    uint16_t emoji_choice_4
) {
    PRESENTER_PRESENTERSETSTATEEMOJISTATE(msg, emoji_choice_1, emoji_choice_2, emoji_choice_3, emoji_choice_4);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_PresenterSetState(
    char* mac_addr_str,
    char* state_name
) {
    PRESENTER_PRESENTERSETSTATE(msg, state_name);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_PresenterRemotePacket(
    char* mac_addr_str,
    uint8_t* from_mac
) {
    PRESENTER_PRESENTERREMOTEPACKET(msg, from_mac);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
