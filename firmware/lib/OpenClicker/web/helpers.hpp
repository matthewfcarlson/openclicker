/**
 AUTOGENERATED ON 2024-06-16 15:50:22.782181
 DO NOT MODIFY THIS FILE MANUALLY
 IT WILL BE OVERWRITTEN ON THE NEXT BUILD
 Use the generate.py script in the protocol folder to regenerate this file
**/

#include <protocol/presenter_protocol.h>
#include <string.h>
#include <emscripten.h>
#include <bridge/bridge.hpp>

const uint32_t msg_text_size = 255;
BridgeTransport* transport = new BridgeTransport();
const uint8_t bridge_mac[6] = {0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0xAF};

char* presenter_message_to_json(const uint8_t* message, const uint32_t message_size, char* from_mac, char* to_mac) {
    if ((message[0] == RemoteButtonPressed)) {
        PresenterProtocolRemoteButtonPressed_t* msg = (PresenterProtocolRemoteButtonPressed_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":20,\"button_id\":%u}}",from_mac,to_mac,msg->button_id) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":20,\"button_id\":%u}}",from_mac,to_mac,msg->button_id);
        return json;
    }

    if ((message[0] == RemoteRequestEmojis)) {
        PresenterProtocolRemoteRequestEmojis_t* msg = (PresenterProtocolRemoteRequestEmojis_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":21}}",from_mac,to_mac) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":21}}",from_mac,to_mac);
        return json;
    }

    if ((message[0] == PresenterOfferEmojiOptions)) {
        PresenterProtocolPresenterOfferEmojiOptions_t* msg = (PresenterProtocolPresenterOfferEmojiOptions_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":22,\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u,\"minimum_emojis\":%u}}",from_mac,to_mac,msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3,msg->minimum_emojis) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":22,\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u,\"minimum_emojis\":%u}}",from_mac,to_mac,msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3,msg->minimum_emojis);
        return json;
    }

    if ((message[0] == RemotePickEmojis)) {
        PresenterProtocolRemotePickEmojis_t* msg = (PresenterProtocolRemotePickEmojis_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":23,\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u}}",from_mac,to_mac,msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":23,\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u}}",from_mac,to_mac,msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3);
        return json;
    }

    if ((message[0] == PresenterAssignEmojis)) {
        PresenterProtocolPresenterAssignEmojis_t* msg = (PresenterProtocolPresenterAssignEmojis_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":24,\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u}}",from_mac,to_mac,msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":24,\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u}}",from_mac,to_mac,msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3);
        return json;
    }

    if ((message[0] == BridgeButtonPressed)) {
        PresenterProtocolBridgeButtonPressed_t* msg = (PresenterProtocolBridgeButtonPressed_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":25,\"button_id\":%u}}",from_mac,to_mac,msg->button_id) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":25,\"button_id\":%u}}",from_mac,to_mac,msg->button_id);
        return json;
    }

    if ((message[0] == RemoteHeartBeat)) {
        PresenterProtocolRemoteHeartBeat_t* msg = (PresenterProtocolRemoteHeartBeat_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":26,\"battery_level\":%u,\"state_name\":\"%s\",\"min_heap\":%u,\"free_heap\":%u}}",from_mac,to_mac,msg->battery_level,msg->state_name,msg->min_heap,msg->free_heap) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":26,\"battery_level\":%u,\"state_name\":\"%s\",\"min_heap\":%u,\"free_heap\":%u}}",from_mac,to_mac,msg->battery_level,msg->state_name,msg->min_heap,msg->free_heap);
        return json;
    }

    if ((message[0] == RemoteRequestState)) {
        PresenterProtocolRemoteRequestState_t* msg = (PresenterProtocolRemoteRequestState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":27,\"state_hash1\":%u,\"state_hash2\":%u,\"state_hash3\":%u,\"state_hash4\":%u}}",from_mac,to_mac,msg->state_hash1,msg->state_hash2,msg->state_hash3,msg->state_hash4) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":27,\"state_hash1\":%u,\"state_hash2\":%u,\"state_hash3\":%u,\"state_hash4\":%u}}",from_mac,to_mac,msg->state_hash1,msg->state_hash2,msg->state_hash3,msg->state_hash4);
        return json;
    }

    if ((message[0] == PresenterSetState) && (strncmp(((PresenterProtocolPresenterSetStateDarkState_t*)message)->state_name,"dark", 4) == 0)) {
        PresenterProtocolPresenterSetStateDarkState_t* msg = (PresenterProtocolPresenterSetStateDarkState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":28,\"state_name\":\"dark\"}}",from_mac,to_mac) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":28,\"state_name\":\"dark\"}}",from_mac,to_mac);
        return json;
    }

    if ((message[0] == PresenterSetState) && (strncmp(((PresenterProtocolPresenterSetStateMultipleChoiceState_t*)message)->state_name,"mc", 2) == 0)) {
        PresenterProtocolPresenterSetStateMultipleChoiceState_t* msg = (PresenterProtocolPresenterSetStateMultipleChoiceState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":28,\"state_name\":\"mc\",\"num_choices\":%u,\"question_text\":\"%s\"}}",from_mac,to_mac,msg->num_choices,msg->question_text) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":28,\"state_name\":\"mc\",\"num_choices\":%u,\"question_text\":\"%s\"}}",from_mac,to_mac,msg->num_choices,msg->question_text);
        return json;
    }

    if ((message[0] == PresenterSetState)) {
        PresenterProtocolPresenterSetState_t* msg = (PresenterProtocolPresenterSetState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":28,\"state_name\":\"%s\"}}",from_mac,to_mac,msg->state_name) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":28,\"state_name\":\"%s\"}}",from_mac,to_mac,msg->state_name);
        return json;
    }

    if ((message[0] == PresenterRemotePacket)) {
        PresenterProtocolPresenterRemotePacket_t* msg = (PresenterProtocolPresenterRemotePacket_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":29,\"from_mac\":\"%s\"}}",from_mac,to_mac,msg->from_mac) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"from\":\"%s\",\"to\":\"%s\",\"msg\":{\"id\":29,\"from_mac\":\"%s\"}}",from_mac,to_mac,msg->from_mac);
        return json;
    }

   return NULL;
}

char* presenter_data_to_json(const uint8_t* message, const uint32_t message_size) {
    if ((message[0] == RemoteButtonPressed)) {
        PresenterProtocolRemoteButtonPressed_t* msg = (PresenterProtocolRemoteButtonPressed_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":20,\"button_id\":%u}",msg->button_id) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":20,\"button_id\":%u}",msg->button_id);
        return json;
    }

    if ((message[0] == RemoteRequestEmojis)) {
        PresenterProtocolRemoteRequestEmojis_t* msg = (PresenterProtocolRemoteRequestEmojis_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":21}") + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":21}");
        return json;
    }

    if ((message[0] == PresenterOfferEmojiOptions)) {
        PresenterProtocolPresenterOfferEmojiOptions_t* msg = (PresenterProtocolPresenterOfferEmojiOptions_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":22,\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u,\"minimum_emojis\":%u}",msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3,msg->minimum_emojis) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":22,\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u,\"minimum_emojis\":%u}",msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3,msg->minimum_emojis);
        return json;
    }

    if ((message[0] == RemotePickEmojis)) {
        PresenterProtocolRemotePickEmojis_t* msg = (PresenterProtocolRemotePickEmojis_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":23,\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u}",msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":23,\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u}",msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3);
        return json;
    }

    if ((message[0] == PresenterAssignEmojis)) {
        PresenterProtocolPresenterAssignEmojis_t* msg = (PresenterProtocolPresenterAssignEmojis_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":24,\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u}",msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":24,\"emoji_choice_1\":%u,\"emoji_choice_2\":%u,\"emoji_choice_3\":%u}",msg->emoji_choice_1,msg->emoji_choice_2,msg->emoji_choice_3);
        return json;
    }

    if ((message[0] == BridgeButtonPressed)) {
        PresenterProtocolBridgeButtonPressed_t* msg = (PresenterProtocolBridgeButtonPressed_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":25,\"button_id\":%u}",msg->button_id) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":25,\"button_id\":%u}",msg->button_id);
        return json;
    }

    if ((message[0] == RemoteHeartBeat)) {
        PresenterProtocolRemoteHeartBeat_t* msg = (PresenterProtocolRemoteHeartBeat_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":26,\"battery_level\":%u,\"state_name\":\"%s\",\"min_heap\":%u,\"free_heap\":%u}",msg->battery_level,msg->state_name,msg->min_heap,msg->free_heap) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":26,\"battery_level\":%u,\"state_name\":\"%s\",\"min_heap\":%u,\"free_heap\":%u}",msg->battery_level,msg->state_name,msg->min_heap,msg->free_heap);
        return json;
    }

    if ((message[0] == RemoteRequestState)) {
        PresenterProtocolRemoteRequestState_t* msg = (PresenterProtocolRemoteRequestState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":27,\"state_hash1\":%u,\"state_hash2\":%u,\"state_hash3\":%u,\"state_hash4\":%u}",msg->state_hash1,msg->state_hash2,msg->state_hash3,msg->state_hash4) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":27,\"state_hash1\":%u,\"state_hash2\":%u,\"state_hash3\":%u,\"state_hash4\":%u}",msg->state_hash1,msg->state_hash2,msg->state_hash3,msg->state_hash4);
        return json;
    }

    if ((message[0] == PresenterSetState) && (strncmp(((PresenterProtocolPresenterSetStateDarkState_t*)message)->state_name,"dark", 4) == 0)) {
        PresenterProtocolPresenterSetStateDarkState_t* msg = (PresenterProtocolPresenterSetStateDarkState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":28,\"state_name\":\"dark\"}") + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":28,\"state_name\":\"dark\"}");
        return json;
    }

    if ((message[0] == PresenterSetState) && (strncmp(((PresenterProtocolPresenterSetStateMultipleChoiceState_t*)message)->state_name,"mc", 2) == 0)) {
        PresenterProtocolPresenterSetStateMultipleChoiceState_t* msg = (PresenterProtocolPresenterSetStateMultipleChoiceState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":28,\"state_name\":\"mc\",\"num_choices\":%u,\"question_text\":\"%s\"}",msg->num_choices,msg->question_text) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":28,\"state_name\":\"mc\",\"num_choices\":%u,\"question_text\":\"%s\"}",msg->num_choices,msg->question_text);
        return json;
    }

    if ((message[0] == PresenterSetState)) {
        PresenterProtocolPresenterSetState_t* msg = (PresenterProtocolPresenterSetState_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":28,\"state_name\":\"%s\"}",msg->state_name) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":28,\"state_name\":\"%s\"}",msg->state_name);
        return json;
    }

    if ((message[0] == PresenterRemotePacket)) {
        PresenterProtocolPresenterRemotePacket_t* msg = (PresenterProtocolPresenterRemotePacket_t*)message;
        int size_needed = snprintf(NULL, 0, "{\"id\":29,\"from_mac\":\"%s\"}",msg->from_mac) + 1;
        char* json = (char*)malloc(size_needed);
        if (json == NULL) return NULL;
        bzero(json, size_needed);
        snprintf(json, size_needed, "{\"id\":29,\"from_mac\":\"%s\"}",msg->from_mac);
        return json;
    }

   return NULL;
}

extern "C" char* create_RemoteButtonPressed(
    char* mac_addr_str,
    uint8_t button_id
) {
    PRESENTER_REMOTEBUTTONPRESSED(msg, button_id);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_RemoteRequestEmojis(
    char* mac_addr_str
) {
    PRESENTER_REMOTEREQUESTEMOJIS(msg);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_PresenterOfferEmojiOptions(
    char* mac_addr_str,
    uint32_t emoji_choice_1,
    uint32_t emoji_choice_2,
    uint32_t emoji_choice_3,
    uint8_t minimum_emojis
) {
    PRESENTER_PRESENTEROFFEREMOJIOPTIONS(msg, emoji_choice_1, emoji_choice_2, emoji_choice_3, minimum_emojis);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_RemotePickEmojis(
    char* mac_addr_str,
    bool emoji_choice_1,
    bool emoji_choice_2,
    bool emoji_choice_3
) {
    PRESENTER_REMOTEPICKEMOJIS(msg, emoji_choice_1, emoji_choice_2, emoji_choice_3);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_PresenterAssignEmojis(
    char* mac_addr_str,
    uint32_t emoji_choice_1,
    uint32_t emoji_choice_2,
    uint32_t emoji_choice_3
) {
    PRESENTER_PRESENTERASSIGNEMOJIS(msg, emoji_choice_1, emoji_choice_2, emoji_choice_3);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_BridgeButtonPressed(
    char* mac_addr_str,
    uint8_t button_id
) {
    PRESENTER_BRIDGEBUTTONPRESSED(msg, button_id);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_RemoteHeartBeat(
    char* mac_addr_str,
    uint8_t battery_level,
    char* state_name,
    uint32_t min_heap,
    uint32_t free_heap
) {
    PRESENTER_REMOTEHEARTBEAT(msg, battery_level, state_name, min_heap, free_heap);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_RemoteRequestState(
    char* mac_addr_str,
    uint32_t state_hash1,
    uint32_t state_hash2,
    uint32_t state_hash3,
    uint32_t state_hash4
) {
    PRESENTER_REMOTEREQUESTSTATE(msg, state_hash1, state_hash2, state_hash3, state_hash4);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_PresenterSetStateDarkState(
    char* mac_addr_str
) {
    PRESENTER_PRESENTERSETSTATEDARKSTATE(msg);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_PresenterSetStateMultipleChoiceState(
    char* mac_addr_str,
    uint8_t num_choices,
    char* question_text
) {
    PRESENTER_PRESENTERSETSTATEMULTIPLECHOICESTATE(msg, num_choices, question_text);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_PresenterSetState(
    char* mac_addr_str,
    char* state_name
) {
    PRESENTER_PRESENTERSETSTATE(msg, state_name);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
extern "C" char* create_PresenterRemotePacket(
    char* mac_addr_str,
    uint8_t* from_mac
) {
    PRESENTER_PRESENTERREMOTEPACKET(msg, from_mac);
    uint8_t mac_addr[8];
    uint32_t mac_addr_str_len = strnlen(mac_addr_str, 22);
    transport->ReadMacFromString(mac_addr_str, &mac_addr_str_len, mac_addr);
    char* msg_txt = (char*)malloc(msg_text_size);
    if (msg_txt == NULL) return nullptr;
    bzero(msg_txt, msg_text_size);
    transport->ConvertMessageToString(bridge_mac, mac_addr, (uint8_t*)&msg, sizeof(msg), msg_txt, msg_text_size);
    return msg_txt;
}
