from io import TextIOWrapper
import sys
import os
import datetime
import enum
import json
import glob
from PIL import Image
from pathlib import Path

def GenerateImageHeaderFile(fp, image_path: Path, output_dict: dict):
    # write the header file
    fp.write(f"// This file was generated by generate.py\n")
    fp.write("\n")
    fp.write('#include "graphics.h"\n')
    fp.write("\n")
    fp.write("#pragma once\n")
    fp.write("\n")
    im = Image.open(image_path).convert("RGBA")
    pixels = []
    width, height = im.size
    image_tag = image_path.stem.replace("-", "_")
    array_name = f"image_{image_tag}_raw"
    # convert the image into 5,6,5 RGB format with 5 bits for red, 6 bits for green, and 5 bits for blue
    for y in range(height):
        for x in range(width):
            r, g, b, a = im.getpixel((x, y))
            if a < 128:
                pixels.append(0x120)
                continue
            if a < 250:
                r = int(r * a / 255)
                g = int(g * a / 255)
                b = int(b * a / 255)
                # print(f"r: {r}, g: {g}, b: {b}, a: {a /255}")
            color = (r >> 3) << 11 | (g >> 2) << 5 | (b >> 3)
            pixels.append(color)

            # raise NotImplementedError(f"r: {r}, g: {g}, b: {b}, a: {a}")
            # r = r >> 3
            # g = g >> 2
            # b = b >> 3
            # pixel = (r << 11) | (g << 5) | b
            # fp.write(f"{pixel}, ")

    fp.write(f"const unsigned short {array_name}[{len(pixels)}] PROGMEM = {{\n")
    for i, pixel in enumerate(pixels):
        if i !=0 and i % 16 == 0:
            fp.write(f"// row {int(i / 16)}, {i} pixels \n")
        fp.write(f"{pixel:#06x}")
        if i != len(pixels) - 1:
            fp.write(",")
    fp.write("\n};\n\n")
    category = image_path.parent.name
    struct_name = f"Graphics_{category}_{image_tag}"
    fp.write(f"const RemoteGraphic_t {struct_name} = {{\n")
    fp.write(f"    .tag = \"{image_tag[0:16]}\",\n")
    fp.write(f"    .data = (const uint8_t*)&{array_name},\n")
    fp.write(f"    .width = {width},\n")
    fp.write(f"    .height = {height},\n")
    fp.write(f"}};\n")
    # the category is the parent folder name of this image
    if category not in output_dict["images"]:
        print("Adding category", category)
        output_dict["images"][category] = []
    raw_unicodes = image_path.stem.split("_")[-1].split("-") if "_" in image_tag else image_tag.split("-")
    try:
        unicodes = list(map(lambda x: int(x,16), raw_unicodes))
    except:
        unicodes = [int(hash(image_tag) & 0xFFFFFF)]
    output_dict["images"][category].append({
        "unicode": unicodes,
        "struct_name": struct_name,
        "tag": image_tag[0:16],
        "name": image_path.stem,
        "width": width,
        "height": height,
        "file_name": image_path.with_suffix(".h").name,
    })
    if category not in output_dict["unicode"]:
        output_dict["unicode"][category] = {}
    if unicodes[0] in output_dict["unicode"][category]:
        raise ValueError(f"Duplicate unicode {unicodes[0]} in {image_path} vs {output_dict["unicode"][category][unicodes[0]]}")
    output_dict["unicode"][category][unicodes[0]] = image_tag[0:16]

def GenerateAllImagesHeaderFile(fp: TextIOWrapper, output_dict: dict):
    fp.write(f"// This file was generated by generate.py on {datetime.datetime.now()}\n")
    fp.write("\n")
    fp.write("#pragma once\n")
    fp.write("\n")
    ptr_items = []
    preload_items = []
    for category, images in output_dict["images"].items():
        for image in images:
            fp.write(f"#include <images/{image['file_name']}> \n")
            define_name = f"UNICODE_GRAPHIC_{category.upper()}_{image['name'].rsplit("_",1)[0].replace("-","_").upper()}"
            if image['unicode'][0] != 0:
                fp.write(f"#define {define_name} {image['unicode'][0]}\n")
            ptr_items.append(f"    const RemoteGraphic_t* {category.upper()}_{image['unicode'][0]} = &{image['struct_name']};")
            preload_items.append(f"    PreloadImage(&{image['struct_name']});")
    fp.write("\n")

    fp.write("#define INCLUDE_ALL_IMAGES \\\n")
    fp.write(" \\\n".join(ptr_items))
    fp.write("\n\n")

    fp.write("#define PRELOAD_ALL_IMAGES \\\n")
    fp.write(" \\\n".join(preload_items))
    fp.write("\n\n")

    fp.write(f"#define EMOJI_COUNT {len(output_dict['images']['emojis'])}\n")
    fp.write("\n")

    fp.write("const RemoteGraphic_t* GetEmojiByUnicode(uint32_t unicode) {\n")
    for image in output_dict["images"]["emojis"]:
        fp.write(f"   if (unicode == {image['unicode'][0]}) return &{image['struct_name']};\n")
    fp.write("   return NULL;\n")
    fp.write("}\n")
    fp.write("\n\n")

    fp.write("const RemoteGraphic_t* GetEmojiByIndex(uint16_t index) {\n")
    for index, image in enumerate(output_dict["images"]["emojis"]):
        fp.write(f"   if (index == {index}) return &{image['struct_name']};\n")
    fp.write("   return NULL;\n")
    fp.write("}\n")
    fp.write("\n\n")

def main():
    # first we need to find the path of the folder this file is in
    # then we need to find the path of the folder above this folder
    root_dir = Path(__file__).resolve().parent.parent
    image_dir = root_dir / "images"
    # get the path to presenter/src/common/Protocol.ts relative to the root dir
    include_header_dir = root_dir / "include"
    image_header_dir = include_header_dir / "images"
    if image_header_dir.exists() == False:
        image_header_dir.mkdir(parents=True)

    # use glob to scan the root dir for any file that is a png, jpg, webp, or bmp
    image_files = glob.glob(str(image_dir / "**" / "*.*"), recursive=True)
    output_dict = {
        "images": {},
        "unicode": {}
    }
    for image_file in image_files:
        if image_file.endswith(".py"):
            continue
        image_file_path = Path(image_file)
        # now create a file that has the same filename ends in .h and is in image_header_path folder
        image_header_path = image_header_dir / image_file_path.with_suffix(".h").name
        image_header_path.unlink(missing_ok=True)
        with open(image_header_path, "x") as fp:
            GenerateImageHeaderFile(fp, image_file_path, output_dict)

    all_image_header_path = include_header_dir / "images.h"
    all_image_header_path.unlink(missing_ok=True)
    with open(all_image_header_path, "x") as fp:
        GenerateAllImagesHeaderFile(fp, output_dict)

    return 0


if __name__ == "__main__":
    sys.exit(main())